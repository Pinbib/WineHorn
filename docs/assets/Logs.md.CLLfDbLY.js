import{_ as s,c as a,a0 as o,o as t}from"./chunks/framework.-Srmup7u.js";const g=JSON.parse('{"title":"Logs","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"Logs.md","filePath":"Logs.md"}'),n={name:"Logs.md"};function i(r,e,l,d,c,p){return t(),a("div",null,e[0]||(e[0]=[o(`<h1 id="logs" tabindex="-1">Logs <a class="header-anchor" href="#logs" aria-label="Permalink to &quot;Logs&quot;">​</a></h1><p><code>WineHorn</code> has built-in functionality for logging and storing requests and responses for error detection.</p><h2 id="directories" tabindex="-1">Directories <a class="header-anchor" href="#directories" aria-label="Permalink to &quot;Directories&quot;">​</a></h2><p>When <code>WineHorn</code> is started, the following directories are automatically created:</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>.</span></span>
<span class="line"><span>└─ log</span></span>
<span class="line"><span>   ├─ response</span></span>
<span class="line"><span>   ├─ in.log</span></span>
<span class="line"><span>   ├─ out.log</span></span>
<span class="line"><span>   └─ system.log</span></span></code></pre></div><p>Each request is assigned its own id (serial number) under which it, the response to it, and the response body will be recorded.</p><h3 id="response" tabindex="-1">response <a class="header-anchor" href="#response" aria-label="Permalink to &quot;response&quot;">​</a></h3><p>This is the directory where response bodies are written in compressed format (compressed via <code>gzip</code> from <code>node:zlib</code>). All files are named according to <code>{id}.zlog</code> so you can find which request this response belongs to.</p><h3 id="in-log" tabindex="-1">in.log <a class="header-anchor" href="#in-log" aria-label="Permalink to &quot;in.log&quot;">​</a></h3><p>A file that records all occurrences (i.e. requests) with supporting information according to the pattern: <code>[{id}] {date} &lt;&lt;&lt; {method} {path} {ip}</code>.</p><h3 id="out-log" tabindex="-1">out.log <a class="header-anchor" href="#out-log" aria-label="Permalink to &quot;out.log&quot;">​</a></h3><p>A file in which all outputs (i.e. responses) are recorded with supporting information according to the pattern: <code>[{id}] {date} &gt;&gt;&gt; {method} {status} {path} {ip}</code>.</p><h3 id="system-log" tabindex="-1">system.log <a class="header-anchor" href="#system-log" aria-label="Permalink to &quot;system.log&quot;">​</a></h3><p>A file in which system messages are recorded.</p>`,14)]))}const u=s(n,[["render",i]]);export{g as __pageData,u as default};
